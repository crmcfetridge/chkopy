#!/usr/bin/env python

import argparse
import hashlib
import ntpath
import os
from shutil import copy2
from shutil import copytree

#specify optional arguments (e.g. -v) and positional arguments.
parser = argparse.ArgumentParser(description="Performs md5 checksum on file/direcotry source and destination.")
parser.add_argument("-v", "--verbosity", help="Increase verbosity--print checksums/errors in terminal", action='store_true')
parser.add_argument("-r", "--recursive", help="Copies directory tree from one location to another. Destination directory must not exist, e.g. /Desktop/directory-to-be-created.", action='store_true')
parser.add_argument("-n", "--nullcopy", help="Nullifies copy commands. Allows use as checksum validator.", action='store_true')
parser.add_argument("csource", type=str, help="Copy source")
parser.add_argument("cdest", type=str, help="Copy destination")
args = parser.parse_args()

#empty dictionary for storing file hashes and file paths from csource and cdest
source_array = {} 	
dest_array = {}
	
#http://stackoverflow.com/questions/3431825/generating-an-md5-checksum-of-a-file
#author: StackOverflow user quantumSoup
#recipe to generate md5 checksum for a file in a directory
def md5(fname):
    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

#http://stackoverflow.com/questions/8384737/python-extract-file-name-from-path-no-matter-what-the-os-path-format
#author: StackOverflow user Lauritz V. Thaulow
#recipe to split the file path from a directory tree
def path_leaf(path):
    head, tail = ntpath.split(path)
    return tail or ntpath.basename(head)
    
# http://akiscode.com/articles/sha-1directoryhash.shtml
# Copyright (c) 2009 Stephen Akiki
# MIT License (Means you can do whatever you want with this)
#  See http://www.opensource.org/licenses/mit-license.php
#  Code edited to work with empty dict called outside of function.
# Error Codes:
#   -1 -> Directory does not exist
#   -2 -> General error (see stack traceback)
# recipe to recursively checksum a directory.
def GetHashofSource(directory, verbose=0):
  import hashlib, os
  global source_array
  SHAhash = hashlib.sha1()
  if not os.path.exists (directory):
    return -1
    
  try:
    for root, dirs, files in os.walk(directory):
      for names in files:
        if verbose == 1:
          print 'Hashing', names
        filepath = os.path.join(root,names)
        try:
          f1 = open(filepath, 'rb')
        except:
          # You can't open the file for some reason
          f1.close()
          continue

	while 1:
	  # Read file in as little chunks
  	  buf = f1.read(4096)
	  if not buf : break
	SHAhash.update(hashlib.sha1(buf).hexdigest())
	#before closing file get individual file hash and add to dictionary  
	source_array[md5(filepath)]= '%r' % filepath
	f1.close()

  except:
    import traceback
    # Print the stack traceback
    traceback.print_exc()
    return -2

  return SHAhash.hexdigest()

# http://akiscode.com/articles/sha-1directoryhash.shtml
# Copyright (c) 2009 Stephen Akiki
# MIT License (Means you can do whatever you want with this)
#  See http://www.opensource.org/licenses/mit-license.php
#  Code edited to work with empty dict called outside of function.
# Error Codes:
#   -1 -> Directory does not exist
#   -2 -> General error (see stack traceback)
# recipe to recursively checksum a directory.   
def GetHashofDest(directory, verbose=0):
  import hashlib, os
  global dest_array
  SHAhash = hashlib.sha1()
  if not os.path.exists (directory):
    return -1
    
  try:
    for root, dirs, files in os.walk(directory):
      for names in files:
        if verbose == 1:
          print 'Hashing', names
        filepath = os.path.join(root,names)
        try:
          f1 = open(filepath, 'rb')
        except:
          # You can't open the file for some reason
          f1.close()
          continue

	while 1:
	  # Read file in as little chunks
  	  buf = f1.read(4096)
	  if not buf : break
	SHAhash.update(hashlib.sha1(buf).hexdigest())
	#before closing file get individual file hash and add to dictionary	  
	dest_array[md5(filepath)]= '%r' % filepath
	f1.close()

  except:
    import traceback
    # Print the stack traceback
    traceback.print_exc()
    return -2

  return SHAhash.hexdigest()   
   
#if verbosity flag is called set variable verbosity to 1 else 0	
if args.verbosity == True:
	verbosity = 1
else:
	verbosity = 0

#if recursive flag is called use the recursive checksum function and copytree to copy directories
if args.recursive == True:
	checkone = GetHashofSource(args.csource, verbosity)
	
	#if null copy flag is False then copy directory
	if args.nullcopy <> True:
		print "copying directory: %r" % args.csource
		copytree(args.csource, args.cdest)
		
	checktwo = GetHashofDest(args.cdest, verbosity)
else:
#if recursive flag is not called
	print "hashing %r" % args.csource
	checkone = md5(args.csource)#set variable checkone equal to the md5 of csource
	#if nullcopy flag is False then copy the file
	if args.nullcopy <> True:
		print "copying %r" % args.csource
		copy2(args.csource,args.cdest)#actual copying function~~so simple!
	try:
		print "hashing %r" % args.cdest	
		checktwo = md5(args.cdest)
	except IOError:
		trialfile = path_leaf(args.csource)
		trialpath = os.path.join(args.cdest, trialfile)
		print "hashing %r" % trialpath
		checktwo = md5(trialpath)

#if verbosity flag is called print both checksums at end of operation		
if verbosity == 1:
	print "checksum of %r is --> %r" % (args.csource, checkone)
	print "checksum of %r is --> %r" % (args.cdest, checktwo)

#if
if args.recursive == True: 
	if source_array.keys() == dest_array.keys():
		print "Individual hashes match."
		if checkone <> checktwo:
			print "Directory level hashes do not match. Proceed with caution."
	else:
		print "Errors occurred copying the following files"
		#print source_array
		#print dest_array
		for hashpacket, filename in source_array.items():
			if hashpacket not in dest_array:
				print "%r" % (filename)	
else:	
	if checkone <> checktwo:	
		print "Individual hashes do not match."
	else:
		print "Copying successful. Hashes match"





	
